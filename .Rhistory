pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
pop.fig
#Population Density Ditribution
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log(pop.square$Population2019/pop.square$Area), text=pop.square$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Population Density in 2019')
pop.square.fig
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Reds",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
pop.fig
#Population Density Ditribution
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log(pop.square$Population2019/pop.square$Area), text=pop.square$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Population Density in 2019')
pop.square.fig
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')
pop.fig
#Population Density Ditribution
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log(pop.square$Population2019/pop.square$Area), text=pop.square$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Population Density in 2019')
pop.square.fig
colorbar(pop.fig, limits = c(0, 20))
colorbar(pop.fig, limits = c(0, 20),len = 0.5)
pop.fig
colorbar(pop.fig, limits = c(10, 22))
colorbar(pop.fig, limits = c(15, 22))
colorbar(pop.fig, limits = c(12, 22))
/colorbar()
?colorbar()
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Viridis",reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(10, 22))
pop.fig
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Viridis",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(10, 22))
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(10, 22))
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale=c("light green", "yellow", "orange", "red"),reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(10, 22))
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale=c("light green", "yellow", "orange", "red"),reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')
pop.fig
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Oranges",reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')
#colorbar(pop.fig, limits = c(10, 22))
pop.fig
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Blues",reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')
#colorbar(pop.fig, limits = c(10, 22))
pop.fig
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Yellows",reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')
#colorbar(pop.fig, limits = c(10, 22))
pop.fig
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Greens",reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')
#colorbar(pop.fig, limits = c(10, 22))
pop.fig
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Greens",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(10, 22))
```{r message=FALSE, warning=FALSE, error=FALSE, echo=FALSE}
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale=c("Reds","Greens"),reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(10, 22))
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale=c("Reds","Greens"),reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(10, 22))
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Pinks",reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(10, 22))
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Pinks",reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(11, 22))
?seq
colorbar(pop.fig, limits = seq(10,22,by=1))
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Pinks",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = seq(10,22,by=1))
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Pinks",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = seq(10,22,by=5))
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Pinks",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(10,22))
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Yellows",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(10,22))
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Yellows",reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(10,22))
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Blues",reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(10,22))
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(10,22))
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(11,22))
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(15,22))
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Blacks",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(15,22))
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Purples",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(15,22))
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Set3",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(15,22))
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale=c("#f7fbff","#85bcdb","#08519c"),reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(15,22))
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale=c("#f7fbff","#85bcdb","#08519c"),reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')
pop.fig
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale=c("#f7fbff","#85bcdb","#08519c"),reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')%>%
limits = c(12,22)
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale=c("#f7fbff","#85bcdb","#08519c"),reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')%>%
colorbar(limits = c(12,22))
pop.fig
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=pop.data$Population2019, text=pop.data$Region, colorscale=c("#f7fbff","#85bcdb","#08519c"),reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')#%>%
#colorbar(limits = c(12,22))
pop.fig
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=pop.data$Population2019, text=pop.data$Region, colorscale=c("#f7fbff","#85bcdb","#08519c"),reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')#%>%
colorbar(limits = c(56000,1.5e+09))
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=pop.data$Population2019, text=pop.data$Region, colorscale=c("#f7fbff","#85bcdb","#08519c"),reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')%>%
colorbar(limits = c(56000,1.5e+09))
pop.fig
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=pop.data$Population2019, text=pop.data$Region, colorscale=c("#f7fbff","#85bcdb","#08519c"),reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')%>%
colorbar(limits = c(5.6e+04,1.5e+09))
pop.fig
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log10(pop.data$Population2019), text=pop.data$Region, colorscale=c("#f7fbff","#85bcdb","#08519c"),reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')%>%
colorbar(limits = c(10,22))
pop.fig
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log10(pop.data$Population2019), text=pop.data$Region, colorscale=c("#f7fbff","#85bcdb","#08519c"),reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')#%>%
#colorbar(limits = c(10,22))
pop.fig
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log2(pop.data$Population2019), text=pop.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')#%>%
#colorbar(limits = c(10,22))
pop.fig
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log2(pop.data$Population2019), text=pop.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')%>%
colorbar(limits = c(15,31))
pop.fig
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019, base = 1.5), text=pop.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')
pop.fig
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019, base = 1.5), text=pop.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Population in 2019')%>%
colorbar(limits = c(26,52))
pop.fig
setwd("~/Undergraduate Files/UNC Course/STOR Major/STOR 691H")
library(utils)
library(dplyr)
library(ggplot2)
library(maps)
library(stringr)
library(readr)
library(tidyverse)
library(readxl)
library(plotly)
#these libraries need to be installed
#library(utils)
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(Region = str_replace_all(Region, "_", " "))%>%
group_by(Region) %>%
mutate(cases_Diff = lag(cases)-cases) %>%
mutate(deaths_Diff = lag(deaths)-deaths) %>%
relocate(cases_Diff, .after = cases) %>%
relocate(deaths_Diff, .after = deaths) %>%
drop_na(countryterritoryCode)
View(covid.data)
#population dataframe
pop.data = unique(data.frame(covid.data$Region,covid.data$popData2019,covid.data$continentExp,covid.data$countryterritoryCode))
names(pop.data)=c("Region","Population2019","Continents","Codes")
pop.data = na.omit(pop.data)
pop.data = unique(pop.data)
#cases dataframe
case.data = data.frame(covid.data$Region,covid.data$cases,covid.data$countryterritoryCode)
names(case.data) = c("Region","cases","Codes")
case.data=aggregate(case.data$cases, by=list(Category=case.data$Region), FUN=sum)
case.data = as.data.frame(cbind(case.data,unique(covid.data$countryterritoryCode)))
names(case.data) = c("Region","cases","Codes")
case.data = na.omit(case.data)
#death dataframe
death.data = data.frame(covid.data$Region,covid.data$deaths,covid.data$countryterritoryCode)
names(death.data) = c("Region","deaths","Codes")
death.data=aggregate(death.data$deaths, by=list(Category=death.data$Region), FUN=sum)
death.data = as.data.frame(cbind(death.data,unique(covid.data$countryterritoryCode)))
names(death.data) = c("Region","deaths","Codes")
death.data = na.omit(death.data)
#Death/Case dataframe
death_case.data = data.frame(case.data$Region,death.data$deaths/case.data$cases,case.data$Codes)
names(death_case.data) = c("Region","Deaths/Case Ratio","Codes")
#death/pop *100
death_pop.data = data.frame(pop.data$Region,death.data$deaths/pop.data$Population2019*100,pop.data$Codes)
names(death_pop.data) = c("Region","Values","Codes")
#Land Area
Land_Area <- read_excel("Land Area.xls")
names(Land_Area) = Land_Area[3,]
Land_Area = Land_Area[-(1:3),]
Land_Area = Land_Area[,c(1,2,62,63)]
#Complete 2018
for (i in 1:nrow(Land_Area)) {
if(is.na(Land_Area$`2018`[i])){
Land_Area$`2018`[i] = Land_Area$`2017`[i]
}
}
Land_Area = na.omit(Land_Area)[,-3]
names(Land_Area)[3] = "Area"
combine = full_join(pop.data, Land_Area, by=c("Codes"="Country Code"))
combine = na.omit(combine)[,-5]
pop.square = na.omit(combine)
pop.square$Area = as.numeric(pop.square$Area)
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log2(pop.data$Population2019), text=pop.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
pop.fig
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log2(pop.data$Population2019), text=pop.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
colorbar(pop.fig, limits = c(15,31))
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log2(pop.data$Population2019), text=pop.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')%>%
colorbar(title = "Population Rates",limits = c(15,31))
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log2(pop.data$Population2019), text=pop.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')%>%
colorbar(title = "Population Rates",limits = c(15,31))
pop.fig
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log(pop.square$Population2019/pop.square$Area), text=pop.square$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population Density in 2019')%>%
colorbar(title = "Population Rates",limits = c(15,31))
pop.square.fig
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log2(pop.square$Population2019/pop.square$Area), text=pop.square$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population Density in 2019')
pop.square.fig
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log(pop.square$Population2019/pop.square$Area), text=pop.square$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population Density in 2019')
pop.square.fig
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log(pop.square$Population2019/pop.square$Area), text=pop.square$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population Density in 2019')%>%
colorbar(title = "Population Density Rates",limits = c(-2,7))
pop.square.fig
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log(pop.square$Population2019/pop.square$Area), text=pop.square$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population Density in 2019')%>%
colorbar(title = "Density Rates",limits = c(-2,7))
pop.square.fig
case.fig <- plot_ly(case.data, type='choropleth', locations=case.data$Codes, z=log2(case.data$cases), text=case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Covid-19 Cases Number')
case.fig
case.fig <- plot_ly(case.data, type='choropleth', locations=case.data$Codes, z=log2(case.data$cases), text=case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Covid-19 Cases Number')%>%
colorbar(title = "Cases Number",limits = c(4,24))
case.fig
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=log2(death.data$deaths+1), text=case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Covid-19 Deaths Number')
death.fig
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=log2(death.data$deaths+1), text=case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Covid-19 Deaths Number')
death.fig
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=log2(death.data$deaths+1), text=case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Covid-19 Deaths Number')%>%
colorbar(title = "Deaths Number")
death.fig
death_case.fig <- plot_ly(death_case.data, type='choropleth', locations=death_case.data$Codes, z=death_case.data$`Deaths/Case Ratio`, text=death_case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Ratio of World Covid-19 Deaths to Cases Number')
death_case.fig
death_case.fig <- plot_ly(death_case.data, type='choropleth', locations=death_case.data$Codes, z=death_case.data$`Deaths/Case Ratio`, text=death_case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Ratio of World Covid-19 Deaths to Cases Number')%>%
colorbar(title = "Ratio Number",limits = c(0,0.1))
death_case.fig
#Death/pop*100 Ditribution
death_pop.fig <- plot_ly(death_pop.data, type='choropleth', locations=death_pop.data$Codes, z=death_pop.data$`Values`, text=death_pop.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Ratio of World Covid-19 Death/Population*100')
death_pop.fig
death_pop.fig <- plot_ly(death_pop.data, type='choropleth', locations=death_pop.data$Codes, z=death_pop.data$`Values`, text=death_pop.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Ratio of World Covid-19 Death/Population*100')%>%
colorbar(title = "Ratio Number")
death_pop.fig
#Death Ditribution
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=log2(death.data$deaths+1), text=case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Covid-19 Deaths Number')%>%
colorbar(title = "Deaths Number")
death.fig
#Death/Case Ditribution
death_case.fig <- plot_ly(death_case.data, type='choropleth', locations=death_case.data$Codes, z=death_case.data$`Deaths/Case Ratio`, text=death_case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Ratio of World Covid-19 Deaths to Cases Number')%>%
colorbar(title = "Ratio Number",limits = c(0,0.1))
death_case.fig
#Death/pop*100 Ditribution
death_pop.fig <- plot_ly(death_pop.data, type='choropleth', locations=death_pop.data$Codes, z=death_pop.data$`Values`, text=death_pop.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Ratio of World Covid-19 Death/Population*100')%>%
colorbar(title = "Ratio Number")
death_pop.fig
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log2(pop.data$Population2019), text=pop.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')%>%
colorbar(title = "Population Rates",limits = c(15,31))
pop.fig
#Population Density Ditribution
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log(pop.square$Population2019/pop.square$Area), text=pop.square$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population Density in 2019')%>%
colorbar(title = "Density Rates",limits = c(-2,7))
pop.square.fig
#Case Ditribution
case.fig <- plot_ly(case.data, type='choropleth', locations=case.data$Codes, z=log2(case.data$cases), text=case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Covid-19 Cases Number')%>%
colorbar(title = "Cases Number",limits = c(4,24))
case.fig
#Death Ditribution
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=log2(death.data$deaths+1), text=case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Covid-19 Deaths Number')%>%
colorbar(title = "Deaths Number")
death.fig
#Death/Case Ditribution
death_case.fig <- plot_ly(death_case.data, type='choropleth', locations=death_case.data$Codes, z=death_case.data$`Deaths/Case Ratio`, text=death_case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Ratio of World Covid-19 Deaths to Cases Number')%>%
colorbar(title = "Ratio Number",limits = c(0,0.1))
death_case.fig
#Death/pop*100 Ditribution
death_pop.fig <- plot_ly(death_pop.data, type='choropleth', locations=death_pop.data$Codes, z=death_pop.data$`Values`, text=death_pop.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Ratio of World Covid-19 Death/Population*100')%>%
colorbar(title = "Ratio Number")
death_pop.fig
covid.time = covid.data[,c(1:4,6,8:9,11)]
View(covid.time)
View(pop.square)
View(pop.data)
View(Land_Area)
View(pop.square)
covid.time = covid.data[,c(1:4,6,8:9,11:12)]
View(covid.time)
covid.time = covid.data[,c(1,6,8:9,11:12)]
View(pop.square)
covid.time$`Density` = NA
for (i in 1:nrow(covid.time)) {
for (j in 1:nrow(pop.square)) {
if(covid.time$countryterritoryCode[i]==pop.square$Codes[j]){
covid.time$`Density`[i] = pop.square$Population2019[j]/pop.square$Area
}
}
}
covid.time = covid.data[,c(1,6,8:9,11:12)]
#Insert Popultaion density
covid.time$`Density` = NA
for (i in 1:nrow(covid.time)) {
for (j in 1:nrow(pop.square)) {
if(covid.time$countryterritoryCode[i]==pop.square$Codes[j]){
covid.time$`Density`[i] = pop.square$Population2019[j]/pop.square$Area[j]
}
}
}
covid.time = covid.data[,c(1,6,8:9,11:12)]
pop.square = mutate(Density = Population2019/Area)
pop.square = pop.square %>%
mutate(Density = Population2019/Area)
pop.square = pop.square %>%
mutate(Density = Population2019/Area)%>%
select(Codes,Density)
covid.time = covid.data[,c(1,6,8:9,11:12)]%>%
rename(Codes="countryterritoryCode")%>%
inner_join(pop.square)
#Creat Density Variable
pop.square = pop.square %>%
mutate(Density = Population2019/Area)%>%
select(Codes,Density)
#Land Area
Land_Area <- read_excel("Land Area.xls")
names(Land_Area) = Land_Area[3,]
Land_Area = Land_Area[-(1:3),]
Land_Area = Land_Area[,c(1,2,62,63)]
#Complete 2018
for (i in 1:nrow(Land_Area)) {
if(is.na(Land_Area$`2018`[i])){
Land_Area$`2018`[i] = Land_Area$`2017`[i]
}
}
Land_Area = na.omit(Land_Area)[,-3]
names(Land_Area)[3] = "Area"
combine = full_join(pop.data, Land_Area, by=c("Codes"="Country Code"))
combine = na.omit(combine)[,-5]
pop.square = na.omit(combine)
pop.square$Area = as.numeric(pop.square$Area)
#Creat Density Variable
pop.density = pop.square %>%
mutate(Density = Population2019/Area)%>%
select(Codes,Density)
#Creat data for time series
covid.time = covid.data[,c(1,6,8:9,11:12)]%>%
rename(Codes="countryterritoryCode")%>%
inner_join(pop.density)%>%
mutate(Region = as.factor(Region))%>%
mutate(group_id = as.integer(Region))
groups = length(unique(covid.time$Region))
for (k in 1:14) {
CASE=NULL
for (j in 1:groups) {
CASE=c(CASE,lag(covid.time$cases_Diff[covid.time$group_id==j],k))
}
covid.time = cbind(covid.time,CASE)
}
names(covid.time)[-14:-1]=paste("CASE_DIFF",1:14,sep="-")
names(covid.time)[9:22]=paste("CASE_DIFF",1:14,sep="-")
for (k in 1:14) {
DEATH=NULL
for (j in 1:groups) {
DEATH=c(DEATH,lag(covid.time$deaths_Diff[covid.time$group_id==j],k))
}
covid.time = cbind(covid.time,DEATH)
}
names(covid.time)[23:36]=paste("DEATH_DIFF",1:14,sep="-")
library(MASS)
data1 = covid.time[,c(2,9:22)]
View(data1)
fit1.m1 <- lm(cases~., data=na.omit(data1))
fit1.m1 <- lm(cases_Diff~., data=na.omit(data1))
fit2.m1 <- lm(cases_Diff~1, data=na.omit(data1))
stepAIC(fit1.m1,direction="backward")
stepAIC(fit2.m1,direction="forward",scope=list(upper=fit1,lower=fit2))
step.m1 = stepAIC(fit2.m1,direction="both",scope=list(upper=fit1.m1,lower=fit2.m1),trace = FALSE)
summary(step.m1)
data2 = covid.time[,c(2,23:36)]
View(data2)
fit1.m2 <- lm(deaths_Diff~., data=na.omit(data2))
data2 = covid.time[,c(2,23:36)]
fit1.m2 <- lm(cases_Diff~., data=na.omit(data2))
fit2.m2 <- lm(cases_Diff~1, data=na.omit(data2))
step.m2 = stepAIC(fit2.m2,direction="both",scope=list(upper=fit1.m2,lower=fit2.m2),trace = FALSE)
summary(step.m2)
data2 = covid.time[,c(2,9:36)]
fit1.m2 <- lm(cases_Diff~., data=na.omit(data2))
fit2.m2 <- lm(cases_Diff~1, data=na.omit(data2))
step.m2 = stepAIC(fit2.m2,direction="both",scope=list(upper=fit1.m2,lower=fit2.m2),trace = FALSE)
summary(step.m2)
anova(step.m1,step.m2)
data3 = covid.time[,c(2,6,9:22)]
fit1.m3 <- lm(cases_Diff~., data=na.omit(data3))
fit2.m3 <- lm(cases_Diff~1, data=na.omit(data3))
step.m3 = stepAIC(fit2.m3,direction="both",scope=list(upper=fit1.m3,lower=fit2.m3),trace = FALSE)
summary(step.m3)
data3 = covid.time[,c(2,6,9:36)]
fit1.m3 <- lm(cases_Diff~., data=na.omit(data3))
fit2.m3 <- lm(cases_Diff~1, data=na.omit(data3))
step.m3 = stepAIC(fit2.m3,direction="both",scope=list(upper=fit1.m3,lower=fit2.m3),trace = FALSE)
summary(step.m3)
anova(step.m2,step.m3)
#Cases, Deaths & Population on Cases
data4 = covid.time[,c(2,6:7,9:36)]
fit1.m4 <- lm(cases_Diff~., data=na.omit(data4))
fit2.m4 <- lm(cases_Diff~1, data=na.omit(data4))
step.m4 = stepAIC(fit2.m4,direction="both",scope=list(upper=fit1.m4,lower=fit2.m4),trace = FALSE)
summary(step.m4)
#Compare models
anova(step.m3,step.m4)
#Cases, Deaths & Population on Cases
data4 = covid.time[,c(2,7,9:36)]
fit1.m4 <- lm(cases_Diff~., data=na.omit(data4))
fit2.m4 <- lm(cases_Diff~1, data=na.omit(data4))
step.m4 = stepAIC(fit2.m4,direction="both",scope=list(upper=fit1.m4,lower=fit2.m4),trace = FALSE)
summary(step.m4)
#Compare models
anova(step.m3,step.m4)
View(data4)
summary(step.m3)
kable(summary(step.m3),format="latex")
install.packages("kableExtra")
# For dev version
# install.packages("devtools")
devtools::install_github("haozhu233/kableExtra")
library(kableExtra)
kable(summary(step.m3),format="latex")
summary(step.m3)
