anova(step.m2,step.m3)
#Cases, Deaths & Population on Cases
data4 = covid.time[,c(2,7,9:36)]
fit1.m4 <- lm(cases_Diff~., data=na.omit(data4))
fit2.m4 <- lm(cases_Diff~1, data=na.omit(data4))
step.m4 = stepAIC(fit2.m4,direction="both",scope=list(upper=fit1.m4,lower=fit2.m4),trace = FALSE)
summary(step.m4)
#Compare models
anova(step.m3,step.m4)
summary(step.m3)
#Creat cases effect on case data
coef = as.data.frame(step.m1$coefficients)
p_value = as.data.frame(summary(step.m1)$coefficients[,4])
table.m1 = cbind.data.frame(coef,p_value)
names(table.m1) = c("Coefficient", "P_Value")
View(table.m1)
summary(step.m1)
summary(step.m1)$coefficients[,"Pr(>|t|)"][2]
summary(step.m1)$coefficients[,"Pr(>|t|)"]
install.packages(broom)
install.packages(`broom`)
install.packages('broom')
install.packages("broom")
library(broom)
tidy(step.m1)
glance(step.m1)
tidy(step.m1)
library(stargazer)
install.packages("stargazer")
library(stargazer)
stargazer(step.m1, type = "text")
stargazer(step.m1, type = "Results of Model.1", align = T )
stargazer(step.m1, title = "Results of Model.1", align = T )
stargazer(step.m1, title = "Results of Model.1", align = T,type = "text" )
stargazer(step.m1, step.m2, title = "Results of Model.1", align = T,type = "text" )
stargazer(step.m1, step.m2, step.m3, step.m4, title = "Results", align = T,type = "text" )
stargazer(step.m1, step.m2, step.m3, title = "Results", align = T,type = "text" )
stargazer(step.m1, step.m2, title = "Results of Model 1 & 2", align = T,type = "text" )
stargazer(step.m3, step.m4, title = "Results of Model 3 & 4", align = T,type = "text" )
stargazer(anova(step.m1,step.m2), title = "Comparion of Model 3 & 4", align = T,type = "text" )
kable(anova(step.m1,step.m2))
anova(step.m1,step.m2)
print(xtable2kable(anova(step.m1,step.m2),type="text"))
kable(anova(step.m1,step.m2),format = "latex")
kable(anova(step.m1,step.m2),format = "latex")
kable(anova(step.m1,step.m2),type = "text")
kableExtra(anova(step.m1,step.m2),type = "text")
library(kableExtra)
kableExtra(anova(step.m1,step.m2),type = "text")
KableExtra(anova(step.m1,step.m2),type = "text")
Kable(anova(step.m1,step.m2),type = "text")
kable(anova(step.m1,step.m2),type = "text")
kable(anova(step.m1,step.m2),type = "text", booktaps =T)
kable(anova(step.m1,step.m2),booktaps =T)
kbl(anova(step.m1,step.m2),booktaps =T)
library(stargazer)
stargazer(step.m1, step.m2, stsep.m3, title = "Results of Model 1 & 2 & 3", align = T,type = "text" )
library(stargazer)
stargazer(step.m1, step.m2, step.m3, title = "Results of Model 1 & 2 & 3", align = T,type = "text" )
library(utils)
library(dplyr)
library(ggplot2)
library(maps)
library(stringr)
library(readr)
library(tidyverse)
library(readxl)
library(plotly)
library(MASS)
library(kableExtra)
library(broom)
library(stargazer)
#these libraries need to be installed
#library(utils)
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(Region = str_replace_all(Region, "_", " "))%>%
group_by(Region) %>%
mutate(cases_Diff = lag(cases)-cases) %>%
mutate(deaths_Diff = lag(deaths)-deaths) %>%
relocate(cases_Diff, .after = cases) %>%
relocate(deaths_Diff, .after = deaths) %>%
drop_na(countryterritoryCode)
#population dataframe
pop.data = unique(data.frame(covid.data$Region,covid.data$popData2019,covid.data$continentExp,covid.data$countryterritoryCode))
names(pop.data)=c("Region","Population2019","Continents","Codes")
pop.data = na.omit(pop.data)
pop.data = unique(pop.data)
#cases dataframe
case.data = data.frame(covid.data$Region,covid.data$cases,covid.data$countryterritoryCode)
names(case.data) = c("Region","cases","Codes")
case.data=aggregate(case.data$cases, by=list(Category=case.data$Region), FUN=sum)
case.data = as.data.frame(cbind(case.data,unique(covid.data$countryterritoryCode)))
names(case.data) = c("Region","cases","Codes")
case.data = na.omit(case.data)
#death dataframe
death.data = data.frame(covid.data$Region,covid.data$deaths,covid.data$countryterritoryCode)
names(death.data) = c("Region","deaths","Codes")
death.data=aggregate(death.data$deaths, by=list(Category=death.data$Region), FUN=sum)
death.data = as.data.frame(cbind(death.data,unique(covid.data$countryterritoryCode)))
names(death.data) = c("Region","deaths","Codes")
death.data = na.omit(death.data)
#Death/Case dataframe
death_case.data = data.frame(case.data$Region,death.data$deaths/case.data$cases,case.data$Codes)
names(death_case.data) = c("Region","Deaths/Case Ratio","Codes")
#death/pop *100
death_pop.data = data.frame(pop.data$Region,death.data$deaths/pop.data$Population2019*100,pop.data$Codes)
names(death_pop.data) = c("Region","Values","Codes")
#Land Area
Land_Area <- read_excel("Land Area.xls")
names(Land_Area) = Land_Area[3,]
Land_Area = Land_Area[-(1:3),]
Land_Area = Land_Area[,c(1,2,62,63)]
#Complete 2018
for (i in 1:nrow(Land_Area)) {
if(is.na(Land_Area$`2018`[i])){
Land_Area$`2018`[i] = Land_Area$`2017`[i]
}
}
Land_Area = na.omit(Land_Area)[,-3]
names(Land_Area)[3] = "Area"
combine = full_join(pop.data, Land_Area, by=c("Codes"="Country Code"))
combine = na.omit(combine)[,-5]
pop.square = na.omit(combine)
pop.square$Area = as.numeric(pop.square$Area)
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log2(pop.data$Population2019), text=pop.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')%>%
colorbar(title = "Population Rates",limits = c(15,31))
pop.fig
#Population Density Ditribution
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log(pop.square$Population2019/pop.square$Area), text=pop.square$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population Density in 2019')%>%
colorbar(title = "Density Rates",limits = c(-2,7))
pop.square.fig
#Case Ditribution
case.fig <- plot_ly(case.data, type='choropleth', locations=case.data$Codes, z=log2(case.data$cases), text=case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Covid-19 Cases Number')%>%
colorbar(title = "Cases Number",limits = c(4,24))
case.fig
#Death Ditribution
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=log2(death.data$deaths+1), text=case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Covid-19 Deaths Number')%>%
colorbar(title = "Deaths Number")
death.fig
#Death/Case Ditribution
death_case.fig <- plot_ly(death_case.data, type='choropleth', locations=death_case.data$Codes, z=death_case.data$`Deaths/Case Ratio`, text=death_case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Ratio of World Covid-19 Deaths to Cases Number')%>%
colorbar(title = "Ratio Number",limits = c(0,0.1))
death_case.fig
#Death/pop*100 Ditribution
death_pop.fig <- plot_ly(death_pop.data, type='choropleth', locations=death_pop.data$Codes, z=death_pop.data$`Values`, text=death_pop.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Ratio of World Covid-19 Death/Population*100')%>%
colorbar(title = "Ratio Number")
death_pop.fig
#Creat Density Variable
pop.density = pop.square %>%
mutate(Density = Population2019/Area)
pop.density = pop.density[,c(4,6)]
#Creat data for time series
covid.time = covid.data[,c(1,6,8:9,11:12)]%>%
rename(Codes="countryterritoryCode")%>%
inner_join(pop.density)%>%
mutate(Region = as.factor(Region))%>%
mutate(group_id = as.integer(Region))
groups = length(unique(covid.time$Region))
#Lag cases and deaths Difference
for (k in 1:14) {
CASE=NULL
for (j in 1:groups) {
CASE=c(CASE,lag(covid.time$cases_Diff[covid.time$group_id==j],k))
}
covid.time = cbind(covid.time,CASE)
}
names(covid.time)[9:22]=paste("CASE_DIFF",1:14,sep="-")
for (k in 1:14) {
DEATH=NULL
for (j in 1:groups) {
DEATH=c(DEATH,lag(covid.time$deaths_Diff[covid.time$group_id==j],k))
}
covid.time = cbind(covid.time,DEATH)
}
names(covid.time)[23:36]=paste("DEATH_DIFF",1:14,sep="-")
#Cases on Cases
data1 = covid.time[,c(2,9:22)]
fit1.m1 <- lm(cases_Diff~., data=na.omit(data1))
fit2.m1 <- lm(cases_Diff~1, data=na.omit(data1))
step.m1 = stepAIC(fit2.m1,direction="both",scope=list(upper=fit1.m1,lower=fit2.m1),trace = FALSE)
summary(step.m1)
#Cases & Deaths on Cases
data2 = covid.time[,c(2,9:36)]
fit1.m2 <- lm(cases_Diff~., data=na.omit(data2))
fit2.m2 <- lm(cases_Diff~1, data=na.omit(data2))
step.m2 = stepAIC(fit2.m2,direction="both",scope=list(upper=fit1.m2,lower=fit2.m2),trace = FALSE)
summary(step.m2)
#Compare models
anova(step.m1,step.m2)
#Cases, Deaths & Population on Cases
data3 = covid.time[,c(2,6,9:36)]
fit1.m3 <- lm(cases_Diff~., data=na.omit(data3))
fit2.m3 <- lm(cases_Diff~1, data=na.omit(data3))
step.m3 = stepAIC(fit2.m3,direction="both",scope=list(upper=fit1.m3,lower=fit2.m3),trace = FALSE)
summary(step.m3)
#Compare models
anova(step.m2,step.m3)
#Cases, Deaths & Population on Cases
data4 = covid.time[,c(2,7,9:36)]
fit1.m4 <- lm(cases_Diff~., data=na.omit(data4))
fit2.m4 <- lm(cases_Diff~1, data=na.omit(data4))
step.m4 = stepAIC(fit2.m4,direction="both",scope=list(upper=fit1.m4,lower=fit2.m4),trace = FALSE)
summary(step.m4)
#Compare models
anova(step.m3,step.m4)
summary(step.m3)
stargazer(step.m1, step.m2, title = "Results of Model 1 & 2", align = T,type = "text" )
stargazer(step.m3, step.m4, title = "Results of Model 3 & 4", align = T,type = "text" )
stargazer(step.m1, step.m2, step.m3, title = "Results of Model 1 & 2 & 3", align = T,type = "text")
|Model Name|Res.DF|RSS|Df|Sum of Sq|F|Pr(>F)|
`r tab.cap="table caption", tab.cap.style="Table Caption"`
|Model Name|Res.DF|RSS|Df|Sum of Sq|F|Pr(>F)|
|----|----|----|----|----|----|----|
|1|52547|39.17|||||
|2|52534|38.78|13|388052910|40.438|<2.2e-16 ***|
table.a1 = as.data.frame(matrix(nrow = 3,ncol = 8))
names(table.a1) = c("Model Name", "Res.DF", "RSS", "DF", "Sum of Sq","F","Pr(>F)")
View(table.a1)
table.a1 = as.data.frame(matrix(nrow = 3,ncol = y))
table.a1 = as.data.frame(matrix(nrow = 3,ncol = 7))
names(table.a1) = c("Model Name", "Res.DF", "RSS", "DF", "Sum of Sq","F","Pr(>F)")
table.a1 = as.data.frame(matrix(nrow = 2,ncol = 7))
names(table.a1) = c("Model Name", "Res.DF", "RSS", "DF", "Sum of Sq","F","Pr(>F)")
tables[1,] = c(1, 52547, 39.17,'-','-','-','-')
table.a1[1,] = c(1, 52547, 39.17,'-','-','-','-')
table.a1 = as.data.frame(matrix(nrow = 2,ncol = 7))
names(table.a1) = c("Model Name", "Res.DF", "RSS", "DF", "Sum of Sq","F","Pr(>F)")
table.a1[1,] = c(1, 52547, 39.17,'-','-','-','-')
table.a1[2,] = c(2,52534,38.78,13,388052910,40.438,'<2.2e-16 ***')
kable(table.a1, caption = "ANOVA Test Compare Models 1&2")
install.packages("expss")
library(utils)
library(dplyr)
library(ggplot2)
library(maps)
library(stringr)
library(readr)
library(tidyverse)
library(readxl)
library(plotly)
library(MASS)
library(kableExtra)
library(broom)
library(stargazer)
library(expss)
table.a1 = as.data.frame(matrix(nrow = 2,ncol = 7))
names(table.a1) = c("Model Name", "Res.DF", "RSS", "DF", "Sum of Sq","F","Pr(>F)")
table.a1[1,] = c(1, 52547, 39.17,'','','','')
table.a1[2,] = c(2,52534,38.78,13,388052910,40.438,'<2.2e-16 ***')
kable(table.a1)%>%set_caption("Table ANOVA Test Compare Models 1&2.")
table.a1 = as.data.frame(matrix(nrow = 2,ncol = 7))
names(table.a1) = c("Model Name", "Res.DF", "RSS", "DF", "Sum of Sq","F","Pr(>F)")
table.a1[1,] = c(1, 52547, 39.17,'','','','')
table.a1[2,] = c(2,52534,38.78,13,388052910,40.438,'<2.2e-16 ***')
kable(table.a1,type="text")%>%set_caption("Table ANOVA Test Compare Models 1&2.")
stargazer(step.m1, step.m2, step.m3, title = "Results of Model 1 & 2 & 3", align = T,type = "text")
stargazer(step.m3, step.m4, title = "Results of Model 3 & 4", align = T,type = "text" )
library(utils)
library(dplyr)
library(ggplot2)
library(maps)
library(stringr)
library(readr)
library(tidyverse)
library(readxl)
library(plotly)
library(MASS)
library(kableExtra)
library(broom)
library(stargazer)
#these libraries need to be installed
#library(utils)
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(Region = str_replace_all(Region, "_", " "))%>%
group_by(Region) %>%
mutate(cases_Diff = lag(cases)-cases) %>%
mutate(deaths_Diff = lag(deaths)-deaths) %>%
relocate(cases_Diff, .after = cases) %>%
relocate(deaths_Diff, .after = deaths) %>%
drop_na(countryterritoryCode)
#population dataframe
pop.data = unique(data.frame(covid.data$Region,covid.data$popData2019,covid.data$continentExp,covid.data$countryterritoryCode))
names(pop.data)=c("Region","Population2019","Continents","Codes")
pop.data = na.omit(pop.data)
pop.data = unique(pop.data)
#cases dataframe
case.data = data.frame(covid.data$Region,covid.data$cases,covid.data$countryterritoryCode)
names(case.data) = c("Region","cases","Codes")
case.data=aggregate(case.data$cases, by=list(Category=case.data$Region), FUN=sum)
case.data = as.data.frame(cbind(case.data,unique(covid.data$countryterritoryCode)))
names(case.data) = c("Region","cases","Codes")
case.data = na.omit(case.data)
#death dataframe
death.data = data.frame(covid.data$Region,covid.data$deaths,covid.data$countryterritoryCode)
names(death.data) = c("Region","deaths","Codes")
death.data=aggregate(death.data$deaths, by=list(Category=death.data$Region), FUN=sum)
death.data = as.data.frame(cbind(death.data,unique(covid.data$countryterritoryCode)))
names(death.data) = c("Region","deaths","Codes")
death.data = na.omit(death.data)
#Death/Case dataframe
death_case.data = data.frame(case.data$Region,death.data$deaths/case.data$cases,case.data$Codes)
names(death_case.data) = c("Region","Deaths/Case Ratio","Codes")
#death/pop *100
death_pop.data = data.frame(pop.data$Region,death.data$deaths/pop.data$Population2019*100,pop.data$Codes)
names(death_pop.data) = c("Region","Values","Codes")
#Land Area
Land_Area <- read_excel("Land Area.xls")
names(Land_Area) = Land_Area[3,]
Land_Area = Land_Area[-(1:3),]
Land_Area = Land_Area[,c(1,2,62,63)]
#Complete 2018
for (i in 1:nrow(Land_Area)) {
if(is.na(Land_Area$`2018`[i])){
Land_Area$`2018`[i] = Land_Area$`2017`[i]
}
}
Land_Area = na.omit(Land_Area)[,-3]
names(Land_Area)[3] = "Area"
combine = full_join(pop.data, Land_Area, by=c("Codes"="Country Code"))
combine = na.omit(combine)[,-5]
pop.square = na.omit(combine)
pop.square$Area = as.numeric(pop.square$Area)
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log2(pop.data$Population2019), text=pop.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')%>%
colorbar(title = "Population Rates",limits = c(15,31))
pop.fig
#Population Density Ditribution
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log(pop.square$Population2019/pop.square$Area), text=pop.square$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population Density in 2019')%>%
colorbar(title = "Density Rates",limits = c(-2,7))
pop.square.fig
#Case Ditribution
case.fig <- plot_ly(case.data, type='choropleth', locations=case.data$Codes, z=log2(case.data$cases), text=case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Covid-19 Cases Number')%>%
colorbar(title = "Cases Number",limits = c(4,24))
case.fig
#Death Ditribution
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=log2(death.data$deaths+1), text=case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Logarithm of World Covid-19 Deaths Number')%>%
colorbar(title = "Deaths Number")
death.fig
#Death/Case Ditribution
death_case.fig <- plot_ly(death_case.data, type='choropleth', locations=death_case.data$Codes, z=death_case.data$`Deaths/Case Ratio`, text=death_case.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Ratio of World Covid-19 Deaths to Cases Number')%>%
colorbar(title = "Ratio Number",limits = c(0,0.1))
death_case.fig
#Death/pop*100 Ditribution
death_pop.fig <- plot_ly(death_pop.data, type='choropleth', locations=death_pop.data$Codes, z=death_pop.data$`Values`, text=death_pop.data$Region, colorscale="Reds",reversescale =F)%>%
layout(title = 'The Ratio of World Covid-19 Death/Population*100')%>%
colorbar(title = "Ratio Number")
death_pop.fig
#Creat Density Variable
pop.density = pop.square %>%
mutate(Density = Population2019/Area)
pop.density = pop.density[,c(4,6)]
#Creat data for time series
covid.time = covid.data[,c(1,6,8:9,11:12)]%>%
rename(Codes="countryterritoryCode")%>%
inner_join(pop.density)%>%
mutate(Region = as.factor(Region))%>%
mutate(group_id = as.integer(Region))
groups = length(unique(covid.time$Region))
#Lag cases and deaths Difference
for (k in 1:14) {
CASE=NULL
for (j in 1:groups) {
CASE=c(CASE,lag(covid.time$cases_Diff[covid.time$group_id==j],k))
}
covid.time = cbind(covid.time,CASE)
}
names(covid.time)[9:22]=paste("CASE_DIFF",1:14,sep="-")
for (k in 1:14) {
DEATH=NULL
for (j in 1:groups) {
DEATH=c(DEATH,lag(covid.time$deaths_Diff[covid.time$group_id==j],k))
}
covid.time = cbind(covid.time,DEATH)
}
names(covid.time)[23:36]=paste("DEATH_DIFF",1:14,sep="-")
#Cases on Cases
data1 = covid.time[,c(2,9:22)]
fit1.m1 <- lm(cases_Diff~., data=na.omit(data1))
fit2.m1 <- lm(cases_Diff~1, data=na.omit(data1))
step.m1 = stepAIC(fit2.m1,direction="both",scope=list(upper=fit1.m1,lower=fit2.m1),trace = FALSE)
summary(step.m1)
#Cases & Deaths on Cases
data2 = covid.time[,c(2,9:36)]
fit1.m2 <- lm(cases_Diff~., data=na.omit(data2))
fit2.m2 <- lm(cases_Diff~1, data=na.omit(data2))
step.m2 = stepAIC(fit2.m2,direction="both",scope=list(upper=fit1.m2,lower=fit2.m2),trace = FALSE)
summary(step.m2)
#Compare models
anova(step.m1,step.m2)
#Cases, Deaths & Population on Cases
data3 = covid.time[,c(2,6,9:36)]
fit1.m3 <- lm(cases_Diff~., data=na.omit(data3))
fit2.m3 <- lm(cases_Diff~1, data=na.omit(data3))
step.m3 = stepAIC(fit2.m3,direction="both",scope=list(upper=fit1.m3,lower=fit2.m3),trace = FALSE)
summary(step.m3)
#Compare models
anova(step.m2,step.m3)
#Cases, Deaths & Population on Cases
data4 = covid.time[,c(2,7,9:36)]
fit1.m4 <- lm(cases_Diff~., data=na.omit(data4))
fit2.m4 <- lm(cases_Diff~1, data=na.omit(data4))
step.m4 = stepAIC(fit2.m4,direction="both",scope=list(upper=fit1.m4,lower=fit2.m4),trace = FALSE)
summary(step.m4)
#Compare models
anova(step.m3,step.m4)
summary(step.m3)
stargazer(step.m1, step.m2, title = "Results of Model 1 & 2", align = T,type = "text" )
stargazer(step.m3, step.m4, title = "Results of Model 3 & 4", align = T,type = "text" )
stargazer(step.m1, step.m2, step.m3, title = "Results of Model 1 & 2 & 3", align = T,type = "text")
stargazer(step.m1, step.m2, step.m3, title = "Results of Model 1 & 2 & 3", align = T,type = "text")
stargazer(step.m3, step.m4, title = "Results of Model 3 & 4", align = T,type = "text" )
stargazer(step.m1, step.m2, step.m3, title = "Results of Model 1 & 2 & 3", align = T)
#Reqired Library
library(utils)
library(dplyr)
library(ggplot2)
library(maps)
library(stringr)
library(readr)
library(tidyverse)
library(readxl)
library(plotly)
library(MASS)
library(kableExtra)
library(broom)
library(stargazer)
library(expss)
stargazer(step.m1, step.m2, step.m3, title = "Results of Model 1 & 2 & 3", align = T)
stargazer(step.m3, step.m4, title = "Results of Model 3 & 4", align = T )
stargazer(step.m1, step.m2, step.m3, type = "html", title = "Results of Model 1 & 2 & 3", align = T)
stargazer(step.m3, step.m4, type = "html", title = "Results of Model 3 & 4", align = T )
?stargazer
install.packages("sjPlot")
library(sjPlot)
stargazer(step.m1, step.m2, step.m3, type = "html", title = "Results of Model 1 & 2 & 3", align = T,out = "Model1.doc")
stargazer(step.m3, step.m4, type = "html", title = "Results of Model 3 & 4", align = T,out = "Model2.doc")
install.packages("bibtex")
plot(step.m3)
summary(step.m3)
plot(step.m3)
plot(step.m3, caption = NA)
#Cited from https://rpubs.com/therimalaya/43190
require(ggplot2)
diagPlot<-function(model){
p1<-ggplot(model, aes(.fitted, .resid))+geom_point()
p1<-p1+stat_smooth(method="loess")+geom_hline(yintercept=0, col="red", linetype="dashed")
p1<-p1+xlab("Fitted values")+ylab("Residuals")
p1<-p1+ggtitle("Residual vs Fitted Plot")+theme_bw()
p2<-ggplot(model, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)
p2<-p2+geom_abline(aes(qqline(.stdresid)))+xlab("Theoretical Quantiles")+ylab("Standardized Residuals")
p2<-p2+ggtitle("Normal Q-Q")+theme_bw()
p3<-ggplot(model, aes(.fitted, sqrt(abs(.stdresid))))+geom_point(na.rm=TRUE)
p3<-p3+stat_smooth(method="loess", na.rm = TRUE)+xlab("Fitted Value")
p3<-p3+ylab(expression(sqrt("|Standardized residuals|")))
p3<-p3+ggtitle("Scale-Location")+theme_bw()
p4<-ggplot(model, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity")
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_bw()
p5<-ggplot(model, aes(.hat, .stdresid))+geom_point(aes(size=.cooksd), na.rm=TRUE)
p5<-p5+stat_smooth(method="loess", na.rm=TRUE)
p5<-p5+xlab("Leverage")+ylab("Standardized Residuals")
p5<-p5+ggtitle("Residual vs Leverage Plot")
p5<-p5+scale_size_continuous("Cook's Distance", range=c(1,5))
p5<-p5+theme_bw()+theme(legend.position="bottom")
p6<-ggplot(model, aes(.hat, .cooksd))+geom_point(na.rm=TRUE)+stat_smooth(method="loess", na.rm=TRUE)
p6<-p6+xlab("Leverage hii")+ylab("Cook's Distance")
p6<-p6+ggtitle("Cook's dist vs Leverage hii/(1-hii)")
p6<-p6+geom_abline(slope=seq(0,3,0.5), color="gray", linetype="dashed")
p6<-p6+theme_bw()
return(list(rvfPlot=p1, qqPlot=p2, sclLocPlot=p3, cdPlot=p4, rvlevPlot=p5, cvlPlot=p6))
}
diagPlts<-diagPlot(step.m3)
lbry<-c("grid", "gridExtra")
lapply(lbry, require, character.only=TRUE, warn.conflicts = FALSE, quietly = TRUE)
do.call(grid.arrange, c(diagPlts,ncol=3))
library(ggfortify)
autoplot(step.m3)
autoplot(step.m3)
?autoplot
autoplot(step.m3, label.size = 3,label.hjust = 0.5)
autoplot(step.m3, label.size = 3,title.hjust = 0.5)
autoplot(step.m3, label.size = 3,title.hjust = 0.5)
plot(step.m2,caption = NA, sub.caption = NA)
summary(step.m3)
#Diagnostic Test
plot(step.m3,caption = NA, sub.caption = "")
plot(step.m3,sub.caption = "")
View(covid.data)
