death_pop.data = data.frame(pop.data$Region,death.data$deaths/pop.data$Population2019*100,pop.data$Codes)
names(death_pop.data) = c("Region","Values","Codes")
death_pop.fig <- plot_ly(death_pop.data, type='choropleth', locations=death_pop.data$Codes, z=death_pop.data$`Values`, text=death_pop.data$Region, colorscale="Blues")
death_pop.fig
library(utils)
library(dplyr)
library(ggplot2)
library(maps)
library(stringr)
#these libraries need to be installed
#library(utils)
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(Region = str_replace_all(Region, "_", " "))
summary(covid.data)
head(covid.data)
#Unmatch Area
worldData = map_data("world")
regions = unique(covid.data$Region)
region_w = unique(worldData$region)
missing_region = c()
for (i in 1:length(regions)) {
if(!regions[i]%in%region_w){
missing_region = c(regions[i],missing_region)
}
}
missing_region = as.data.frame(missing_region); names(missing_region) = c("Missing Region")
world_region = as.data.frame(region_w); names(world_region) = c("World Region")
#population dataframe
pop.data = unique(data.frame(covid.data$Region,covid.data$popData2019,covid.data$continentExp,covid.data$countryterritoryCode))
names(pop.data)=c("Region","Population2019","Continents","Codes")
pop.data = na.omit(pop.data)
#Population
library(plotly)
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=pop.data$Population2019, text=pop.data$Region, colorscale="Blues")
pop.fig
#Square Miles
library(readr)
area <- read_csv("Squares Miles 2013.csv")
#Check missing
for (i in 1:length(regions)) {
if(!regions[i]%in%area$Country){
print(regions[i])
}
}
#Case/death Ratio
#cases dataframe
case.data = data.frame(covid.data$Region,covid.data$cases,covid.data$countryterritoryCode)
names(case.data) = c("Region","cases","Codes")
case.data=aggregate(case.data$cases, by=list(Category=case.data$Region), FUN=sum)
case.data = as.data.frame(cbind(case.data,unique(covid.data$countryterritoryCode)))
names(case.data) = c("Region","cases","Codes")
#death dataframe
death.data = data.frame(covid.data$Region,covid.data$deaths,covid.data$countryterritoryCode)
names(death.data) = c("Region","deaths","Codes")
death.data=aggregate(death.data$deaths, by=list(Category=death.data$Region), FUN=sum)
death.data = as.data.frame(cbind(death.data,unique(covid.data$countryterritoryCode)))
names(death.data) = c("Region","deaths","Codes")
#Case/death dataframe
case_death.data = data.frame(case.data$Region,case.data$cases/death.data$deaths,case.data$Codes)
names(case_death.data) = c("Region","Case/Deaths Ratio","Codes")
case.fig <- plot_ly(case.data, type='choropleth', locations=case.data$Codes, z=case.data$cases, text=case.data$Region, colorscale="Blues")
case.fig
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=death.data$deaths, text=case.data$Region, colorscale="Blues")
death.fig
case_death.data <- case_death.data[is.finite(case_death.data$`Case/Deaths Ratio`),]
case_death.fig <- plot_ly(case_death.data, type='choropleth', locations=case_death.data$Codes, z=case_death.data$`Case/Deaths Ratio`, text=case_death.data$Region, colorscale="Blues")
case_death.fig
#death/pop *100
death_pop.data = data.frame(pop.data$Region,death.data$deaths/pop.data$Population2019*100,pop.data$Codes)
#Case/death Ratio
#cases dataframe
case.data = data.frame(covid.data$Region,covid.data$cases,covid.data$countryterritoryCode)
names(case.data) = c("Region","cases","Codes")
case.data=aggregate(case.data$cases, by=list(Category=case.data$Region), FUN=sum)
case.data = as.data.frame(cbind(case.data,unique(covid.data$countryterritoryCode)))
names(case.data) = c("Region","cases","Codes")
case.data = na.omit(case.data)
#death dataframe
death.data = data.frame(covid.data$Region,covid.data$deaths,covid.data$countryterritoryCode)
names(death.data) = c("Region","deaths","Codes")
death.data=aggregate(death.data$deaths, by=list(Category=death.data$Region), FUN=sum)
death.data = as.data.frame(cbind(death.data,unique(covid.data$countryterritoryCode)))
names(death.data) = c("Region","deaths","Codes")
death.data = na.omit(death.data)
#Case/death dataframe
case_death.data = data.frame(case.data$Region,case.data$cases/death.data$deaths,case.data$Codes)
names(case_death.data) = c("Region","Case/Deaths Ratio","Codes")
case.fig <- plot_ly(case.data, type='choropleth', locations=case.data$Codes, z=case.data$cases, text=case.data$Region, colorscale="Blues")
case.fig
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=death.data$deaths, text=case.data$Region, colorscale="Blues")
death.fig
case_death.data <- case_death.data[is.finite(case_death.data$`Case/Deaths Ratio`),]
case_death.fig <- plot_ly(case_death.data, type='choropleth', locations=case_death.data$Codes, z=case_death.data$`Case/Deaths Ratio`, text=case_death.data$Region, colorscale="Blues")
case_death.fig
#death/pop *100
death_pop.data = data.frame(pop.data$Region,death.data$deaths/pop.data$Population2019*100,pop.data$Codes)
names(death_pop.data) = c("Region","Values","Codes")
death_pop.fig <- plot_ly(death_pop.data, type='choropleth', locations=death_pop.data$Codes, z=death_pop.data$`Values`, text=death_pop.data$Region, colorscale="Blues")
death_pop.fig
library(plotly)
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Blues")
pop.fig
View(world_region)
View(area)
case.fig <- plot_ly(case.data, type='choropleth', locations=case.data$Codes, z=log(case.data$cases), text=case.data$Region, colorscale="Blues")
case.fig
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=log(death.data$deaths), text=case.data$Region, colorscale="Blues")
death.fig
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=log(death.data$deaths+1), text=case.data$Region, colorscale="Blues")
death.fig
case_death.data <- case_death.data[is.finite(case_death.data$`Case/Deaths Ratio`),]
case_death.fig <- plot_ly(case_death.data, type='choropleth', locations=case_death.data$Codes, z=log(case_death.data$`Case/Deaths Ratio`), text=case_death.data$Region, colorscale="Blues")
case_death.fig
case_death.data = data.frame(case.data$Region,death.data$deaths/case.data$cases,case.data$Codes)
names(case_death.data) = c("Region","Case/Deaths Ratio","Codes")
#case_death.data <- case_death.data[is.finite(case_death.data$`Case/Deaths Ratio`),]
case_death.fig <- plot_ly(case_death.data, type='choropleth', locations=case_death.data$Codes, z=log(case_death.data$`Case/Deaths Ratio`), text=case_death.data$Region, colorscale="Blues")
case_death.fig
#case_death.data <- case_death.data[is.finite(case_death.data$`Case/Deaths Ratio`),]
case_death.fig <- plot_ly(case_death.data, type='choropleth', locations=case_death.data$Codes, z=log(case_death.data$`Case/Deaths Ratio`+1), text=case_death.data$Region, colorscale="Blues")
case_death.fig
#case_death.data <- case_death.data[is.finite(case_death.data$`Case/Deaths Ratio`),]
case_death.fig <- plot_ly(case_death.data, type='choropleth', locations=case_death.data$Codes, z=case_death.data$`Case/Deaths Ratio`, text=case_death.data$Region, colorscale="Blues")
case_death.fig
which(case_death.data$Region"Yeman")
which(case_death.data$Region=="Yeman")
View(area)
View(covid.data)
library(tidyverse)
library(tidyverse)
View(area)
library(tidyverse)
full_join(pop.data,area, by=c("Region"="Country"))
View(area)
library(tidyverse)
combine = full_join(pop.data,area, by=c("Region"="Country"))
View(combine)
View(covid.data)
View(covid.data)
library(utils)
library(dplyr)
library(ggplot2)
library(maps)
library(stringr)
#these libraries need to be installed
#library(utils)
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(Region = str_replace_all(Region, "_", " "))
summary(covid.data)
head(covid.data)
#Unmatch Area
worldData = map_data("world")
regions = unique(covid.data$Region)
region_w = unique(worldData$region)
missing_region = c()
for (i in 1:length(regions)) {
if(!regions[i]%in%region_w){
missing_region = c(regions[i],missing_region)
}
}
missing_region = as.data.frame(missing_region); names(missing_region) = c("Missing Region")
world_region = as.data.frame(region_w); names(world_region) = c("World Region")
#population dataframe
pop.data = unique(data.frame(covid.data$Region,covid.data$popData2019,covid.data$continentExp,covid.data$countryterritoryCode))
names(pop.data)=c("Region","Population2019","Continents","Codes")
pop.data = na.omit(pop.data)
#Population
#Exchange darke and light
library(plotly)
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Blues")
pop.fig
#Square Miles
library(readr)
area <- read_csv("Squares Miles 2013.csv")
#Check missing
for (i in 1:length(regions)) {
if(!regions[i]%in%area$Country){
print(regions[i])
}
}
#Case/death Ratio
#cases dataframe
case.data = data.frame(covid.data$Region,covid.data$cases,covid.data$countryterritoryCode)
names(case.data) = c("Region","cases","Codes")
case.data=aggregate(case.data$cases, by=list(Category=case.data$Region), FUN=sum)
case.data = as.data.frame(cbind(case.data,unique(covid.data$countryterritoryCode)))
names(case.data) = c("Region","cases","Codes")
case.data = na.omit(case.data)
#death dataframe
death.data = data.frame(covid.data$Region,covid.data$deaths,covid.data$countryterritoryCode)
names(death.data) = c("Region","deaths","Codes")
death.data=aggregate(death.data$deaths, by=list(Category=death.data$Region), FUN=sum)
death.data = as.data.frame(cbind(death.data,unique(covid.data$countryterritoryCode)))
names(death.data) = c("Region","deaths","Codes")
death.data = na.omit(death.data)
#Case/death dataframe
case_death.data = data.frame(case.data$Region,death.data$deaths/case.data$cases,case.data$Codes)
names(case_death.data) = c("Region","Case/Deaths Ratio","Codes")
case.fig <- plot_ly(case.data, type='choropleth', locations=case.data$Codes, z=log(case.data$cases), text=case.data$Region, colorscale="Blues")
case.fig
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=log(death.data$deaths+1), text=case.data$Region, colorscale="Blues")
death.fig
#case_death.data <- case_death.data[is.finite(case_death.data$`Case/Deaths Ratio`),]
case_death.fig <- plot_ly(case_death.data, type='choropleth', locations=case_death.data$Codes, z=case_death.data$`Case/Deaths Ratio`, text=case_death.data$Region, colorscale="Blues")
case_death.fig
#death/pop *100
death_pop.data = data.frame(pop.data$Region,death.data$deaths/pop.data$Population2019*100,pop.data$Codes)
names(death_pop.data) = c("Region","Values","Codes")
death_pop.fig <- plot_ly(death_pop.data, type='choropleth', locations=death_pop.data$Codes, z=death_pop.data$`Values`, text=death_pop.data$Region, colorscale="Blues")
death_pop.fig
library(tidyverse)
combine = full_join(pop.data,area, by=c("Region"="Country"))
library(utils)
library(dplyr)
library(ggplot2)
library(maps)
library(stringr)
#these libraries need to be installed
#library(utils)
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(Region = str_replace_all(Region, "_", " "))
#population dataframe
pop.data = unique(data.frame(covid.data$Region,covid.data$popData2019,covid.data$continentExp,covid.data$countryterritoryCode))
names(pop.data)=c("Region","Population2019","Continents","Codes")
pop.data = na.omit(pop.data)
View(pop.data)
pop.data = unique(pop.data)
View(pop.data)
#Case/death Ratio
#cases dataframe
case.data = data.frame(covid.data$Region,covid.data$cases,covid.data$countryterritoryCode)
names(case.data) = c("Region","cases","Codes")
case.data=aggregate(case.data$cases, by=list(Category=case.data$Region), FUN=sum)
case.data = as.data.frame(cbind(case.data,unique(covid.data$countryterritoryCode)))
names(case.data) = c("Region","cases","Codes")
case.data = na.omit(case.data)
#death dataframe
death.data = data.frame(covid.data$Region,covid.data$deaths,covid.data$countryterritoryCode)
names(death.data) = c("Region","deaths","Codes")
death.data=aggregate(death.data$deaths, by=list(Category=death.data$Region), FUN=sum)
death.data = as.data.frame(cbind(death.data,unique(covid.data$countryterritoryCode)))
names(death.data) = c("Region","deaths","Codes")
death.data = na.omit(death.data)
#Death/Case dataframe
death_case.data = data.frame(case.data$Region,death.data$deaths/case.data$cases,case.data$Codes)
names(case_death.data) = c("Region","Deaths/Case Ratio","Codes")
#Death/Case dataframe
death_case.data = data.frame(case.data$Region,death.data$deaths/case.data$cases,case.data$Codes)
names(death_case.data) = c("Region","Deaths/Case Ratio","Codes")
#death/pop *100
death_pop.data = data.frame(pop.data$Region,death.data$deaths/pop.data$Population2019*100,pop.data$Codes)
names(death_pop.data) = c("Region","Values","Codes")
View(death_case.data)
View(death_pop.data)
View(death.data)
View(pop.data)
library(utils)
library(dplyr)
library(ggplot2)
library(maps)
library(stringr)
#these libraries need to be installed
#library(utils)
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
#population dataframe
pop.data = unique(data.frame(covid.data$Region,covid.data$popData2019,covid.data$continentExp,covid.data$countryterritoryCode))
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(Region = str_replace_all(Region, "_", " "))
#population dataframe
pop.data = unique(data.frame(covid.data$Region,covid.data$popData2019,covid.data$continentExp,covid.data$countryterritoryCode))
names(pop.data)=c("Region","Population2019","Continents","Codes")
pop.data = na.omit(pop.data)
pop.data = unique(pop.data)
#Case/death Ratio
#cases dataframe
case.data = data.frame(covid.data$Region,covid.data$cases,covid.data$countryterritoryCode)
names(case.data) = c("Region","cases","Codes")
case.data=aggregate(case.data$cases, by=list(Category=case.data$Region), FUN=sum)
case.data = as.data.frame(cbind(case.data,unique(covid.data$countryterritoryCode)))
names(case.data) = c("Region","cases","Codes")
case.data = na.omit(case.data)
#death dataframe
death.data = data.frame(covid.data$Region,covid.data$deaths,covid.data$countryterritoryCode)
names(death.data) = c("Region","deaths","Codes")
death.data=aggregate(death.data$deaths, by=list(Category=death.data$Region), FUN=sum)
death.data = as.data.frame(cbind(death.data,unique(covid.data$countryterritoryCode)))
names(death.data) = c("Region","deaths","Codes")
death.data = na.omit(death.data)
#Death/Case dataframe
death_case.data = data.frame(case.data$Region,death.data$deaths/case.data$cases,case.data$Codes)
names(death_case.data) = c("Region","Deaths/Case Ratio","Codes")
#death/pop *100
death_pop.data = data.frame(pop.data$Region,death.data$deaths/pop.data$Population2019*100,pop.data$Codes)
names(death_pop.data) = c("Region","Values","Codes")
#square mile
library(readr)
square <- read_csv("Squares Miles 2013.csv")
View(square)
square = square[,-3]
#square mile
library(readr)
library(tidyverse)
square <- read_csv("Squares Miles 2013.csv")
square = square[,-3]
combine = full_join(pop.data,square, by=c("Region"="Country"))
View(combine)
missing_id = c(30,47,52,85,201)
missing_value = c(2226, 124503, 30450, 13948, 3800000)
missing_id = c(30,47,52,85,201)
missing_value = c(2226, 124503, 30450, 13948, 3800000)
combine$`Amount/square miles`[missing_id] = missing_value
pop.square = na.omit(combine)
View(pop.square)
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=pop.square$Population2019/pop.square$`Amount/square miles`, text=pop.square$Region, colorscale="Blues")
pop.square.fig
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log(pop.square$Population2019/pop.square$`Amount/square miles`), text=pop.square$Region, colorscale="Blues")
pop.square.fig
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log(pop.square$Population2019/pop.square$`Amount/square miles`), text=pop.square$Region, color = ~z, colorscale="Blues")
pop.square.fig
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log(pop.square$Population2019/pop.square$`Amount/square miles`), text=pop.square$Region, color = ~log(pop.square$Population2019/pop.square$`Amount/square miles`), colorscale="Blues")
pop.square.fig
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log(pop.square$Population2019/pop.square$`Amount/square miles`), text=pop.square$Region, colorscale="Blues",reversescale =T)
pop.square.fig
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Blues",reversescale =T)
#Population Density Ditribution
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log(pop.square$Population2019/pop.square$`Amount/square miles`), text=pop.square$Region, colorscale="Blues",reversescale =T)
#Case Ditribution
case.fig <- plot_ly(case.data, type='choropleth', locations=case.data$Codes, z=log(case.data$cases), text=case.data$Region, colorscale="Blues",reversescale =T)
#Death Ditribution
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=log(death.data$deaths+1), text=case.data$Region, colorscale="Blues",reversescale =T,reversescale =T)
#Case/Death Ditribution
case_death.fig <- plot_ly(case_death.data, type='choropleth', locations=case_death.data$Codes, z=case_death.data$`Case/Deaths Ratio`, text=case_death.data$Region, colorscale="Blues",reversescale =T)
#Case/Death Ditribution
death_case.fig <- plot_ly(death_case.data, type='choropleth', locations=death_case.data$Codes, z=death_case.data$`Case/Deaths Ratio`, text=death_case.data$Region, colorscale="Blues",reversescale =T)
#Death/pop*100 Ditribution
death_pop.fig <- plot_ly(death_pop.data, type='choropleth', locations=death_pop.data$Codes, z=death_pop.data$`Values`, text=death_pop.data$Region, colorscale="Blues",reversescale =T)
#Death Ditribution
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=log(death.data$deaths+1), text=case.data$Region, colorscale="Blues",reversescale =T)
#Plotting
pop.fig
pop.square.fig
case.fig
death.fig
death_case.fig
death_pop.fig
#Population Ditribution
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population in 2019')
#Population Density Ditribution
pop.square.fig <- plot_ly(pop.square, type='choropleth', locations=pop.square$Codes, z=log(pop.square$Population2019/pop.square$`Amount/square miles`), text=pop.square$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Population Density in 2019')
#Case Ditribution
case.fig <- plot_ly(case.data, type='choropleth', locations=case.data$Codes, z=log(case.data$cases), text=case.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Covid-19 Cases Number')
#Death Ditribution
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=log(death.data$deaths+1), text=case.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Logarithm of World Covid-19 Deaths Number')
#Case/Death Ditribution
death_case.fig <- plot_ly(death_case.data, type='choropleth', locations=death_case.data$Codes, z=death_case.data$`Case/Deaths Ratio`, text=death_case.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Ratio of World Covid-19 Deaths to Cases Number')
#Death/pop*100 Ditribution
death_pop.fig <- plot_ly(death_pop.data, type='choropleth', locations=death_pop.data$Codes, z=death_pop.data$`Values`, text=death_pop.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Ratio of World Covid-19 Death/Population*100')
#Plotting
pop.fig
pop.square.fig
case.fig
death.fig
death_case.fig
death_pop.fig
death_case.fig <- plot_ly(death_case.data, type='choropleth', locations=death_case.data$Codes, z=death_case.data$`Deaths/Case Ratio`, text=death_case.data$Region, colorscale="Blues",reversescale =T)%>%
layout(title = 'The Ratio of World Covid-19 Deaths to Cases Number')
#Plotting
pop.fig
pop.square.fig
case.fig
death.fig
death_case.fig
death_pop.fig
# libraries:
library(ggplot2)
library(gganimate)
install.packages("gganimate")
# libraries:
library(ggplot2)
library(gganimate)
library(babynames)
install.packages(babynames)
install.packages("babynames")
install.packages("hrbrthemes")
# libraries:
library(ggplot2)
library(gganimate)
library(babynames)
library(hrbrthemes)
# Keep only 3 names
don <- babynames %>%
filter(name %in% c("Ashley", "Patricia", "Helen")) %>%
filter(sex=="F")
# Plot
don %>%
ggplot( aes(x=year, y=n, group=name, color=name)) +
geom_line() +
geom_point() +
scale_color_viridis(discrete = TRUE) +
ggtitle("Popularity of American names in the previous 30 years") +
theme_ipsum() +
ylab("Number of babies born") +
transition_reveal(year)
install.packages(" viridis")
install.packages("viridis")
don %>%
ggplot( aes(x=year, y=n, group=name, color=name)) +
geom_line() +
geom_point() +
scale_color_viridis(discrete = TRUE) +
ggtitle("Popularity of American names in the previous 30 years") +
theme_ipsum() +
ylab("Number of babies born") +
transition_reveal(year)
library(viridis)
don %>%
ggplot( aes(x=year, y=n, group=name, color=name)) +
geom_line() +
geom_point() +
scale_color_viridis(discrete = TRUE) +
ggtitle("Popularity of American names in the previous 30 years") +
theme_ipsum() +
ylab("Number of babies born") +
transition_reveal(year)
don
View(don)
ggplot(data = don, aes(x=year, y=n, group=name, color=name)) +
geom_line() +
geom_point() +
scale_color_viridis(discrete = TRUE) +
ggtitle("Popularity of American names in the previous 30 years") +
theme_ipsum() +
ylab("Number of babies born") +
transition_reveal(year)
combine = full_join(pop.data,square, by=c("Region"="Country"))
View(combine)
View(covid.data)
library(tidyverse)
library(Ecdat)
Airline2=Airline
j=2
k=1
for (k in 1:8) {
OUT=NULL
for (j in 1:6) {
OUT=c(OUT,lag(Airline$cost[Airline$airline==j],k))
}
}
library(tidyverse)
library(Ecdat)
Airline2=Airline
j=2
k=1
for (k in 1:8) {
OUT=NULL
for (j in 1:6) {
OUT=c(OUT,lag(Airline2$cost[Airline2$airline==j],k))
}
Airline2 = cbind(Airline2,OUT)
}
Airline2=Airline
library(Ecdat)
install.packages("Ecdat")
library(tidyverse)
library(Ecdat)
Airline2=Airline
j=2
k=1
for (k in 1:8) {
OUT=NULL
for (j in 1:6) {
OUT=c(OUT,lag(Airline2$cost[Airline2$airline==j],k))
}
Airline2 = cbind(Airline2,OUT)
}
names(Airline2)[7:14]=paste("cost",1:8,sep="-")
View(Airline2)
