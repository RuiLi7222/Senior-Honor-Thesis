scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="Population", title="Countries and Territories Population in 2019", x="", y="") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_bw()
#cases dataframe
case.data = data.frame(covid.data$Region,covid.data$cases)
names(case.data) = c("Region","cases")
case.data=aggregate(case.data$cases, by=list(Category=case.data$Region), FUN=sum)
names(case.data) = c("Region","cases")
summary(case.data)
head(case.data)
#get the world polygon
worldData = map_data("world")
#plot world population based on color
ggplot() +
geom_map(data = WorldData, map = WorldData,
aes(x = long, y = lat, group = group, map_id=region),
fill = "white", colour = "#7f7f7f", size=0.5) +
geom_map(data = case.data, map=WorldData,
aes(fill=cases, map_id=Region),
colour="#7f7f7f", size=0.5) +
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="thistle2", high="darkred", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="cases", title="Covid_19 Total Cases", x="", y="") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_bw()
#cases dataframe
death.data = data.frame(covid.data$Region,covid.data$deaths)
names(death.data) = c("Region","deaths")
death.data=aggregate(death.data$deaths, by=list(Category=death.data$Region), FUN=sum)
names(death.data) = c("Region","deaths")
summary(death.data)
head(death.data)
#get the world polygon
worldData = map_data("world")
#plot world population based on color
ggplot() +
geom_map(data = WorldData, map = WorldData,
aes(x = long, y = lat, group = group, map_id=region),
fill = "white", colour = "#7f7f7f", size=0.5) +
geom_map(data = death.data, map=WorldData,
aes(fill=deaths, map_id=Region),
colour="#7f7f7f", size=0.5) +
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="thistle2", high="darkred", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="deaths", title="Covid_19 Total Deaths", x="", y="") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_bw()
#Other tries
centroids <- summarize(group_by(worldData, region),
x = mean(range(long)), y = mean(range(lat)))
names(centroids) <- c("Region","long","lat")
centroids <- centroids[centroids$Region%in%regions,]
head(centroids)
ggplot() +
geom_polygon(data = world,aes(x = long, y = lat, fill = region, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE) + # do this to leave off the color legend
geom_point(aes(x=long, y=lat), data = centroids, color = "red")
library(utils)
library(dplyr)
library(ggplot2)
library(maps)
library(utils)
library(dplyr)
library(ggplot2)
library(maps)
#these libraries need to be installed
#library(utils)
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
View(data)
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(countriesAndTerritories = str_replace(countriesAndTerritories, "_", " "))
install.packages("stringr")
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(countriesAndTerritories = str_replace_all(countriesAndTerritories, "_", " "))
library(utils)
library(dplyr)
library(ggplot2)
library(maps)
library(stringr)
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(countriesAndTerritories = str_replace_all(countriesAndTerritories, "_", " "))
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(countriesAndTerritories = str_replace_all(covid.data$countriesAndTerritories, "_", " "))
#these libraries need to be installed
#library(utils)
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
View(data)
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(countriesAndTerritories = str_replace_all(countriesAndTerritories, "_", " "))
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(countriesAndTerritories = str_replace_all(data$countriesAndTerritories, "_", " "))
summary(covid.data)
head(covid.data)
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(Region = str_replace_all(Region, "_", " "))
summary(covid.data)
head(covid.data)
View(covid.data)
#get a list of dates, countries, population, and continents
dates = unique(covid.data$Date)
regions = unique(covid.data$Region)
pops = unique(covid.data$popData2019)
continents = unique(covid.data$continentExp)
#population dataframe
pop.data = unique(data.frame(covid.data$Region,covid.data$popData2019,covid.data$continentExp))
names(pop.data)=c("Region","Population2019","Continents")
summary(pop.data)
head(pop.data)
#get the world polygon
worldData = map_data("world")
#plot world population based on color
ggplot() +
geom_map(data = worldData, map = worldData,
aes(x = long, y = lat, group = group, map_id=region),
fill = "white", colour = "#7f7f7f", size=0.5) +
geom_map(data = pop.data, map=worldData,
aes(fill=Population2019, map_id=Region),
colour="#7f7f7f", size=0.5) +
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="thistle2", high="darkred", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="Population", title="Countries and Territories Population in 2019", x="", y="") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_bw()
View(worldData)
library(utils)
library(dplyr)
library(ggplot2)
library(maps)
library(stringr)
library(utils)
library(dplyr)
library(ggplot2)
library(maps)
library(stringr)
#these libraries need to be installed
#library(utils)
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(Region = str_replace_all(Region, "_", " "))
summary(covid.data)
head(covid.data)
worldData
regions = unique(covid.data$Region)
region_w = unique(worldData$region)
regions[1]
regions[2]
regions[2]%in%region_w
for (i in 1:length(regions)) {
if(!regions[i]%in%region_w){
print(regions[i])
}
}
View(worldData)
r = as.data.frame(region_w)
View(r)
regions = unique(covid.data$Region)
region_w = unique(worldData$region)
missing_region = c()
for (i in 1:length(regions)) {
if(!regions[i]%in%region_w){
missing_region = c(regions[i],missing_region)
}
}
missing_region = as.data.frame(missing_region)
View(missing_region)
View(r)
missing_region = as.data.frame(missing_region)
world_region = region_w
world_region = as.data.frame(region_w)
View(world_region)
missing_region = as.data.frame(missing_region); names(missing_region) = c("Missing Region")
world_region = as.data.frame(region_w); names(world_region) = c("World Region")
library(utils)
library(dplyr)
library(ggplot2)
library(maps)
library(stringr)
#these libraries need to be installed
#library(utils)
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(Region = str_replace_all(Region, "_", " "))
summary(covid.data)
head(covid.data)
regions = unique(covid.data$Region)
region_w = unique(worldData$region)
worldData = map_data("world")
regions = unique(covid.data$Region)
region_w = unique(worldData$region)
missing_region = c()
for (i in 1:length(regions)) {
if(!regions[i]%in%region_w){
missing_region = c(regions[i],missing_region)
}
}
missing_region = as.data.frame(missing_region); names(missing_region) = c("Missing Region")
world_region = as.data.frame(region_w); names(world_region) = c("World Region")
View(covid.data)
#population dataframe
pop.data = unique(data.frame(covid.data$Region,covid.data$popData2019,covid.data$continentExp,covid.data$countryterritoryCode))
names(pop.data)=c("Region","Population2019","Continents","Codes")
View(pop.data)
pop.data = na.omit(pop.data)
View(pop.data)
View(world_region)
View(worldData)
library(plotly)
install.packages(plotly)
library(plotly)
install.packages("plotly")
library(plotly)
library(plotly)
library(plotly)
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=pop.data$Population2019, text=pop.data$Region, colorscale="Blues")
pop.fig
#Square Miles
library(readr)
area <- read_csv("Squares Miles 2013.csv")
#Square Miles
library(readr)
area <- read_csv("Squares Miles 2013.csv")
#Square Miles
library(readr)
area <- read_csv("Squares Miles 2013.csv")
View(area)
#Check missing
for (i in 1:length(regions)) {
if(!regions[i]%in%area$Country){
print(regions[i])
}
}
#Case/death Ratio
#cases dataframe
case.data = data.frame(covid.data$Region,covid.data$cases,covid.data$countryterritoryCode)
names(case.data) = c("Region","cases","Codes")
case.data=aggregate(case.data$cases, by=list(Category=case.data$Region), FUN=sum)
names(case.data) = c("Region","cases","Codes")
View(case.data)
case.data = data.frame(covid.data$Region,covid.data$cases,covid.data$countryterritoryCode)
names(case.data) = c("Region","cases","Codes")
View(case.data)
case.data = data.frame(covid.data$Region,covid.data$cases,covid.data$countryterritoryCode)
names(case.data) = c("Region","cases","Codes")
case.data=aggregate(case.data$cases, by=list(Category=case.data$Region), FUN=sum)
View(case.data)
case.data = as.data.frame(cbind(case.data,unique(covid.data$countryterritoryCode)))
case.data = data.frame(covid.data$Region,covid.data$cases,covid.data$countryterritoryCode)
names(case.data) = c("Region","cases","Codes")
case.data=aggregate(case.data$cases, by=list(Category=case.data$Region), FUN=sum)
case.data = as.data.frame(cbind(case.data,unique(covid.data$countryterritoryCode)))
names(case.data) = c("Region","cases","Codes")
death.data = data.frame(covid.data$Region,covid.data$deaths,covid.data$countryterritoryCode)
names(death.data) = c("Region","deaths","Codes")
death.data=aggregate(death.data$deaths, by=list(Category=death.data$Region), FUN=sum)
death.data = as.data.frame(cbind(death.data,unique(covid.data$countryterritoryCode)))
names(death.data) = c("Region","deaths","Codes")
View(death.data)
case_death.data = data.frame(case.data$Region,case.data$cases/death.data$deaths,case.data$Codes)
names(case_death.data) = c("Region","Case/Deaths Ratio","Codes")
View(case_death.data)
case.fig <- plot_ly(case.data, type='choropleth', locations=case.data$Codes, z=case.data$cases, text=case.data$Region, colorscale="Blues")
case.fig
case.fig <- plot_ly(case.data, type='choropleth', locations=case.data$Codes, z=case.data$cases, text=case.data$Region, colorscale="Blues")
case.fig
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=death.data$deaths, text=case.data$Region, colorscale="Blues")
death.fig
case_death.fig <- plot_ly(case_death.data, type='choropleth', locations=case_death.data$Codes, z=case_death.data$`Case/Deaths Ratio`, text=case_death.data$Region, colorscale="Blues")
case_death.fig
case_death.data <- case_death.data[is.finite(rowSums(case_death.data)),]
case_death.data <- case_death.data[is.finite(rowSums(case_death.data$`Case/Deaths Ratio`)),]
is.infinite(INF)
is.infinite(Inf)
for (i in 1:length(case_death.data)) {
if(is.infinite(case_death.data$`Case/Deaths Ratio`[i])){
case_death.data$`Case/Deaths Ratio`[i]=NA
}
}
is.infinite(case_death.data$`Case/Deaths Ratio`[6]
)
View(case_death.data)
for (i in 1:length(case_death.data)) {
if(is.infinite(case_death.data$`Case/Deaths Ratio`[i])){
case_death.data$`Case/Deaths Ratio`[i]=NA
}
}
View(case_death.data)
case_death.data[is.finite(rowSums(case_death.data)),]
case_death.data <- case_death.data[is.finite(case_death.data$`Case/Deaths Ratio`),]
case_death.data <- case_death.data[is.finite(case_death.data$`Case/Deaths Ratio`),]
case_death.fig <- plot_ly(case_death.data, type='choropleth', locations=case_death.data$Codes, z=case_death.data$`Case/Deaths Ratio`, text=case_death.data$Region, colorscale="Blues")
case_death.fig
View(pop.data)
#death/pop *100
deathr = death.data$Region
popr = pop.data$Region
popr
for (i in popr) {
if(!i%in%deathr){
print(i)
}
}
View(pop.data)
#death/pop *100
deathr = death.data$Region
popr = pop.data$Region
for (i in deathr) {
if(!i%in%popr){
print(i)
}
}
death.data = na.omit(death.data)
#death/pop *100
death_pop.data = data.frame(pop.data$Region,death.data$deaths/pop.data$Population2019*100,pop.data$Codes)
View(death_pop.data)
#death/pop *100
death_pop.data = data.frame(pop.data$Region,death.data$deaths/pop.data$Population2019*100,pop.data$Codes)
names(death_pop.data) = c("Region","Values","Codes")
#death/pop *100
death_pop.data = data.frame(pop.data$Region,death.data$deaths/pop.data$Population2019*100,pop.data$Codes)
names(death_pop.data) = c("Region","Values","Codes")
death_pop.fig <- plot_ly(death_pop.data, type='choropleth', locations=death_pop.data$Codes, z=death_pop.data$`Values`, text=death_pop.data$Region, colorscale="Blues")
death_pop.fig
library(utils)
library(dplyr)
library(ggplot2)
library(maps)
library(stringr)
#these libraries need to be installed
#library(utils)
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
#library("dplyr") require "dplyr" package for the use of %>%
covid.data = data %>%
rename(Date="dateRep") %>%
rename(Region="countriesAndTerritories") %>%
mutate(Date=as.Date(Date,format="%d/%m/%y"))%>%
mutate(Region = str_replace_all(Region, "_", " "))
summary(covid.data)
head(covid.data)
#Unmatch Area
worldData = map_data("world")
regions = unique(covid.data$Region)
region_w = unique(worldData$region)
missing_region = c()
for (i in 1:length(regions)) {
if(!regions[i]%in%region_w){
missing_region = c(regions[i],missing_region)
}
}
missing_region = as.data.frame(missing_region); names(missing_region) = c("Missing Region")
world_region = as.data.frame(region_w); names(world_region) = c("World Region")
#population dataframe
pop.data = unique(data.frame(covid.data$Region,covid.data$popData2019,covid.data$continentExp,covid.data$countryterritoryCode))
names(pop.data)=c("Region","Population2019","Continents","Codes")
pop.data = na.omit(pop.data)
#Population
library(plotly)
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=pop.data$Population2019, text=pop.data$Region, colorscale="Blues")
pop.fig
#Square Miles
library(readr)
area <- read_csv("Squares Miles 2013.csv")
#Check missing
for (i in 1:length(regions)) {
if(!regions[i]%in%area$Country){
print(regions[i])
}
}
#Case/death Ratio
#cases dataframe
case.data = data.frame(covid.data$Region,covid.data$cases,covid.data$countryterritoryCode)
names(case.data) = c("Region","cases","Codes")
case.data=aggregate(case.data$cases, by=list(Category=case.data$Region), FUN=sum)
case.data = as.data.frame(cbind(case.data,unique(covid.data$countryterritoryCode)))
names(case.data) = c("Region","cases","Codes")
#death dataframe
death.data = data.frame(covid.data$Region,covid.data$deaths,covid.data$countryterritoryCode)
names(death.data) = c("Region","deaths","Codes")
death.data=aggregate(death.data$deaths, by=list(Category=death.data$Region), FUN=sum)
death.data = as.data.frame(cbind(death.data,unique(covid.data$countryterritoryCode)))
names(death.data) = c("Region","deaths","Codes")
#Case/death dataframe
case_death.data = data.frame(case.data$Region,case.data$cases/death.data$deaths,case.data$Codes)
names(case_death.data) = c("Region","Case/Deaths Ratio","Codes")
case.fig <- plot_ly(case.data, type='choropleth', locations=case.data$Codes, z=case.data$cases, text=case.data$Region, colorscale="Blues")
case.fig
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=death.data$deaths, text=case.data$Region, colorscale="Blues")
death.fig
case_death.data <- case_death.data[is.finite(case_death.data$`Case/Deaths Ratio`),]
case_death.fig <- plot_ly(case_death.data, type='choropleth', locations=case_death.data$Codes, z=case_death.data$`Case/Deaths Ratio`, text=case_death.data$Region, colorscale="Blues")
case_death.fig
#death/pop *100
death_pop.data = data.frame(pop.data$Region,death.data$deaths/pop.data$Population2019*100,pop.data$Codes)
#Case/death Ratio
#cases dataframe
case.data = data.frame(covid.data$Region,covid.data$cases,covid.data$countryterritoryCode)
names(case.data) = c("Region","cases","Codes")
case.data=aggregate(case.data$cases, by=list(Category=case.data$Region), FUN=sum)
case.data = as.data.frame(cbind(case.data,unique(covid.data$countryterritoryCode)))
names(case.data) = c("Region","cases","Codes")
case.data = na.omit(case.data)
#death dataframe
death.data = data.frame(covid.data$Region,covid.data$deaths,covid.data$countryterritoryCode)
names(death.data) = c("Region","deaths","Codes")
death.data=aggregate(death.data$deaths, by=list(Category=death.data$Region), FUN=sum)
death.data = as.data.frame(cbind(death.data,unique(covid.data$countryterritoryCode)))
names(death.data) = c("Region","deaths","Codes")
death.data = na.omit(death.data)
#Case/death dataframe
case_death.data = data.frame(case.data$Region,case.data$cases/death.data$deaths,case.data$Codes)
names(case_death.data) = c("Region","Case/Deaths Ratio","Codes")
case.fig <- plot_ly(case.data, type='choropleth', locations=case.data$Codes, z=case.data$cases, text=case.data$Region, colorscale="Blues")
case.fig
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=death.data$deaths, text=case.data$Region, colorscale="Blues")
death.fig
case_death.data <- case_death.data[is.finite(case_death.data$`Case/Deaths Ratio`),]
case_death.fig <- plot_ly(case_death.data, type='choropleth', locations=case_death.data$Codes, z=case_death.data$`Case/Deaths Ratio`, text=case_death.data$Region, colorscale="Blues")
case_death.fig
#death/pop *100
death_pop.data = data.frame(pop.data$Region,death.data$deaths/pop.data$Population2019*100,pop.data$Codes)
names(death_pop.data) = c("Region","Values","Codes")
death_pop.fig <- plot_ly(death_pop.data, type='choropleth', locations=death_pop.data$Codes, z=death_pop.data$`Values`, text=death_pop.data$Region, colorscale="Blues")
death_pop.fig
library(plotly)
pop.fig <- plot_ly(pop.data, type='choropleth', locations=pop.data$Codes, z=log(pop.data$Population2019), text=pop.data$Region, colorscale="Blues")
pop.fig
View(world_region)
View(area)
case.fig <- plot_ly(case.data, type='choropleth', locations=case.data$Codes, z=log(case.data$cases), text=case.data$Region, colorscale="Blues")
case.fig
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=log(death.data$deaths), text=case.data$Region, colorscale="Blues")
death.fig
death.fig <- plot_ly(death.data, type='choropleth', locations=death.data$Codes, z=log(death.data$deaths+1), text=case.data$Region, colorscale="Blues")
death.fig
case_death.data <- case_death.data[is.finite(case_death.data$`Case/Deaths Ratio`),]
case_death.fig <- plot_ly(case_death.data, type='choropleth', locations=case_death.data$Codes, z=log(case_death.data$`Case/Deaths Ratio`), text=case_death.data$Region, colorscale="Blues")
case_death.fig
case_death.data = data.frame(case.data$Region,death.data$deaths/case.data$cases,case.data$Codes)
names(case_death.data) = c("Region","Case/Deaths Ratio","Codes")
#case_death.data <- case_death.data[is.finite(case_death.data$`Case/Deaths Ratio`),]
case_death.fig <- plot_ly(case_death.data, type='choropleth', locations=case_death.data$Codes, z=log(case_death.data$`Case/Deaths Ratio`), text=case_death.data$Region, colorscale="Blues")
case_death.fig
#case_death.data <- case_death.data[is.finite(case_death.data$`Case/Deaths Ratio`),]
case_death.fig <- plot_ly(case_death.data, type='choropleth', locations=case_death.data$Codes, z=log(case_death.data$`Case/Deaths Ratio`+1), text=case_death.data$Region, colorscale="Blues")
case_death.fig
#case_death.data <- case_death.data[is.finite(case_death.data$`Case/Deaths Ratio`),]
case_death.fig <- plot_ly(case_death.data, type='choropleth', locations=case_death.data$Codes, z=case_death.data$`Case/Deaths Ratio`, text=case_death.data$Region, colorscale="Blues")
case_death.fig
which(case_death.data$Region"Yeman")
which(case_death.data$Region=="Yeman")
View(area)
View(covid.data)
library(tidyverse)
library(tidyverse)
View(area)
library(tidyverse)
full_join(pop.data,area, by=c("Region"="Country"))
View(area)
library(tidyverse)
combine = full_join(pop.data,area, by=c("Region"="Country"))
View(combine)
View(covid.data)
View(covid.data)
